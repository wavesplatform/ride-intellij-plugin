/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.wavesplatform.rideplugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.wavesplatform.rideplugin.psi.RideTypes;

import static com.intellij.psi.TokenType.*;import static com.wavesplatform.rideplugin.psi.RideTypes.*;
import static com.wavesplatform.rideplugin.psi.RideTypes.BAD_CHARACTER;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_RideLexer.flex</tt>
 */
public class _RideLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\2\2\16\1\3\22\0\1\20\1\52\1\21\1\15\1\0\1\60\1\54\1\22\1\37\1"+
    "\41\1\56\1\53\1\50\1\30\1\24\1\57\1\17\1\103\2\17\1\107\1\105\1\104\1\17\1"+
    "\106\1\17\1\36\1\62\1\61\1\42\1\51\1\0\1\4\1\75\2\27\1\71\1\77\1\66\2\27\1"+
    "\72\1\27\1\101\1\70\1\27\1\73\1\67\2\27\1\100\1\76\1\74\6\27\1\46\1\23\1\47"+
    "\1\55\1\45\1\0\1\12\1\102\1\63\1\26\1\10\1\11\1\33\1\65\1\25\2\31\1\13\1\64"+
    "\1\44\1\31\1\35\1\31\1\6\1\14\1\5\1\7\2\31\1\34\2\31\1\43\1\40\1\32\7\0\1"+
    "\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\10\4\1\5\1\6\3\1"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\4\3\10\2\4\2\0\10\4\2\5\1\0"+
    "\1\36\1\0\1\37\1\0\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\0\1\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\4\3\10"+
    "\10\4\1\60\1\4\1\61\1\0\1\62\1\63\1\64"+
    "\2\4\1\10\1\65\1\10\1\4\1\66\1\67\1\4"+
    "\1\70\1\71\1\72\2\4\1\61\1\0\1\73\1\4"+
    "\1\74\1\10\2\4\1\75\1\4\1\76\1\77\1\10"+
    "\4\4\1\100\1\10\1\101\1\102\1\103\1\0\1\10"+
    "\1\0\1\104\6\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\110\0\330\0\u0120\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\110\0\u05a0\0\110"+
    "\0\u05e8\0\110\0\u0630\0\u0678\0\u06c0\0\u0360\0\110\0\110"+
    "\0\110\0\u0708\0\u0750\0\u0798\0\u07e0\0\110\0\u0438\0\110"+
    "\0\u0828\0\110\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0438\0\u0480\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88"+
    "\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u03a8\0\110\0\u03f0"+
    "\0\110\0\u0d38\0\u0240\0\u0438\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\u0d80\0\u0dc8\0\110\0\110\0\110"+
    "\0\110\0\110\0\u0e10\0\110\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170"+
    "\0\u11b8\0\u0240\0\u1200\0\u1248\0\u1290\0\110\0\u0240\0\110"+
    "\0\u12d8\0\u1320\0\u1368\0\u0510\0\u13b0\0\u13f8\0\u0240\0\u0240"+
    "\0\u1440\0\u0240\0\u0240\0\u0240\0\u1488\0\u14d0\0\u1518\0\u1560"+
    "\0\u0240\0\u15a8\0\u0510\0\u15f0\0\u1638\0\u1680\0\u0240\0\u16c8"+
    "\0\u0438\0\u0240\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u0240"+
    "\0\u1878\0\u0240\0\u0240\0\u0240\0\u18c0\0\u1908\0\u1950\0\u0510"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\3\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\12\1\24\1\25\1\12"+
    "\1\26\3\12\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\2\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\12\1\55\3\24\1\56\2\24\1\57\4\24"+
    "\1\60\5\16\112\0\2\3\12\0\1\3\1\0\1\3"+
    "\74\0\1\12\1\61\6\12\2\0\1\12\3\0\1\62"+
    "\1\63\5\12\1\0\3\12\6\0\2\12\11\0\1\62"+
    "\3\0\2\12\1\64\22\12\5\0\3\12\1\65\4\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\25\12\5\0\10\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\1\66\1\12\11\0\1\62\3\0\25\12\5\0"+
    "\6\12\1\67\1\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\2\12\1\70\2\12\1\71\2\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\10\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\3\12\1\72"+
    "\4\12\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\1\73\7\12\2\0\1\12\3\0\1\62\1\63\5\12"+
    "\1\0\3\12\6\0\2\12\11\0\1\62\3\0\25\12"+
    "\1\74\3\0\12\74\1\0\11\74\1\75\57\74\5\0"+
    "\10\62\2\0\1\16\3\0\1\62\1\63\5\62\1\0"+
    "\3\62\6\0\1\62\1\16\11\0\1\62\3\0\20\62"+
    "\5\16\21\76\1\77\66\76\22\100\1\101\65\100\5\0"+
    "\10\62\2\0\1\62\3\0\1\62\1\63\5\62\1\0"+
    "\3\62\6\0\2\62\11\0\1\62\3\0\25\62\5\0"+
    "\1\62\1\102\6\62\2\0\1\62\3\0\1\62\1\63"+
    "\5\62\1\0\3\62\6\0\2\62\11\0\1\62\3\0"+
    "\25\62\5\0\4\12\1\103\3\12\2\0\1\12\3\0"+
    "\1\62\1\63\5\12\1\0\3\12\6\0\2\12\11\0"+
    "\1\62\3\0\25\12\5\0\10\24\2\0\1\24\3\0"+
    "\1\62\1\63\5\24\1\0\3\24\6\0\2\24\11\0"+
    "\1\62\3\0\25\24\5\0\10\62\2\0\1\62\3\0"+
    "\1\62\1\63\3\62\1\104\1\62\1\0\3\62\4\0"+
    "\1\105\1\0\2\62\11\0\1\62\3\0\25\62\36\0"+
    "\1\106\14\0\1\107\74\0\1\110\1\0\1\111\107\0"+
    "\1\112\6\0\1\113\66\0\1\114\64\0\10\12\2\0"+
    "\1\12\3\0\1\62\1\63\1\115\4\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\25\12\42\0\1\116"+
    "\107\0\1\117\120\0\1\120\76\0\1\121\11\0\1\122"+
    "\1\123\74\0\1\124\52\0\5\12\1\125\2\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\5\12\1\126"+
    "\2\12\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\10\24\2\0\1\24\3\0\1\62\1\63\5\24\1\0"+
    "\3\24\6\0\2\24\11\0\1\62\3\0\4\24\1\127"+
    "\20\24\5\0\10\24\2\0\1\24\3\0\1\62\1\63"+
    "\5\24\1\0\3\24\6\0\2\24\11\0\1\62\3\0"+
    "\10\24\1\130\14\24\5\0\10\24\2\0\1\24\3\0"+
    "\1\62\1\63\5\24\1\0\3\24\6\0\2\24\11\0"+
    "\1\62\3\0\13\24\1\131\11\24\5\0\5\12\1\132"+
    "\2\12\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\2\12\1\133\5\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\3\12\1\134\4\12\2\0\1\12\3\0"+
    "\1\62\1\63\5\12\1\0\3\12\6\0\2\12\11\0"+
    "\1\62\3\0\25\12\5\0\10\12\2\0\1\12\3\0"+
    "\1\62\1\63\5\12\1\0\1\135\2\12\6\0\2\12"+
    "\11\0\1\62\3\0\25\12\5\0\10\12\2\0\1\12"+
    "\3\0\1\62\1\63\1\136\4\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\7\12\1\137"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\25\12\5\0\10\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\1\140\1\12\11\0\1\62\3\0\25\12\5\0"+
    "\6\12\1\141\1\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\1\142\7\12\2\0\1\12\3\0\1\62"+
    "\1\63\5\12\1\0\3\12\6\0\2\12\11\0\1\62"+
    "\3\0\25\12\5\0\1\12\1\143\6\12\2\0\1\12"+
    "\3\0\1\62\1\63\5\12\1\0\3\12\6\0\2\12"+
    "\11\0\1\62\3\0\25\12\1\74\3\0\12\74\1\0"+
    "\72\74\3\0\12\74\1\0\13\74\1\144\55\74\5\0"+
    "\10\62\2\0\1\62\3\0\1\62\1\63\1\145\4\62"+
    "\1\0\3\62\6\0\2\62\11\0\1\62\3\0\25\62"+
    "\15\0\1\146\77\0\6\12\1\147\1\12\2\0\1\12"+
    "\3\0\1\62\1\63\5\12\1\0\3\12\6\0\2\12"+
    "\11\0\1\62\3\0\25\12\42\0\1\150\52\0\7\12"+
    "\1\151\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\1\152\7\12\2\0\1\12\3\0\1\62\1\63\5\12"+
    "\1\0\3\12\6\0\2\12\11\0\1\62\3\0\25\12"+
    "\5\0\10\24\2\0\1\24\3\0\1\62\1\63\5\24"+
    "\1\0\3\24\6\0\2\24\11\0\1\62\3\0\5\24"+
    "\1\153\17\24\5\0\10\24\2\0\1\24\3\0\1\62"+
    "\1\63\5\24\1\0\3\24\6\0\2\24\11\0\1\62"+
    "\3\0\11\24\1\154\13\24\5\0\10\24\2\0\1\24"+
    "\3\0\1\62\1\63\5\24\1\0\3\24\6\0\2\24"+
    "\11\0\1\62\3\0\11\24\1\155\13\24\5\0\7\12"+
    "\1\156\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\3\12\1\157\4\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\10\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\1\160\1\12\11\0\1\62"+
    "\3\0\25\12\5\0\3\12\1\161\4\12\2\0\1\12"+
    "\3\0\1\62\1\63\5\12\1\0\3\12\6\0\2\12"+
    "\11\0\1\62\3\0\25\12\5\0\1\162\7\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\3\12\1\163"+
    "\4\12\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\10\12\2\0\1\12\3\0\1\62\1\63\5\12\1\0"+
    "\3\12\6\0\2\12\11\0\1\62\3\0\1\164\24\12"+
    "\5\0\7\12\1\165\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\10\12\2\0\1\12\3\0\1\62\1\63"+
    "\1\166\4\12\1\0\3\12\6\0\2\12\11\0\1\62"+
    "\3\0\25\12\1\74\1\0\2\167\12\74\1\167\1\74"+
    "\1\144\67\74\5\0\10\62\2\0\1\62\3\0\1\62"+
    "\1\63\1\62\1\170\3\62\1\0\3\62\6\0\2\62"+
    "\11\0\1\62\3\0\25\62\5\0\3\12\1\171\4\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\25\12\5\0\10\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\1\172\24\12\5\0"+
    "\10\24\2\0\1\24\3\0\1\62\1\63\5\24\1\0"+
    "\3\24\6\0\2\24\11\0\1\62\3\0\6\24\1\173"+
    "\16\24\5\0\10\24\2\0\1\24\3\0\1\62\1\63"+
    "\5\24\1\0\3\24\6\0\2\24\11\0\1\62\3\0"+
    "\14\24\1\174\10\24\5\0\3\12\1\175\4\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\3\12\6\0"+
    "\2\12\11\0\1\62\3\0\25\12\5\0\10\12\2\0"+
    "\1\12\3\0\1\62\1\63\5\12\1\0\1\12\1\176"+
    "\1\12\6\0\2\12\11\0\1\62\3\0\25\12\5\0"+
    "\3\12\1\177\4\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\25\12\5\0\10\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\1\200\24\12\2\0\2\167\12\0\1\167\1\0\1\167"+
    "\74\0\3\62\1\201\4\62\2\0\1\62\3\0\1\62"+
    "\1\63\5\62\1\0\3\62\6\0\2\62\11\0\1\62"+
    "\3\0\25\62\5\0\10\12\2\0\1\12\3\0\1\62"+
    "\1\63\5\12\1\0\3\12\6\0\2\12\11\0\1\62"+
    "\3\0\2\12\1\202\22\12\5\0\10\24\2\0\1\24"+
    "\3\0\1\62\1\63\5\24\1\0\3\24\6\0\2\24"+
    "\11\0\1\62\3\0\15\24\1\203\7\24\5\0\10\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\20\12\1\204\1\205"+
    "\1\206\2\12\5\0\10\12\2\0\1\12\3\0\1\62"+
    "\1\63\5\12\1\0\2\12\1\207\6\0\2\12\11\0"+
    "\1\62\3\0\25\12\5\0\1\210\7\12\2\0\1\12"+
    "\3\0\1\62\1\63\5\12\1\0\3\12\6\0\2\12"+
    "\11\0\1\62\3\0\25\12\5\0\10\24\2\0\1\24"+
    "\3\0\1\62\1\63\5\24\1\0\3\24\6\0\2\24"+
    "\11\0\1\62\3\0\7\24\1\211\15\24\5\0\10\12"+
    "\2\0\1\12\3\0\1\62\1\63\5\12\1\0\3\12"+
    "\6\0\2\12\11\0\1\62\3\0\21\12\1\212\3\12"+
    "\5\0\10\12\2\0\1\12\3\0\1\62\1\63\5\12"+
    "\1\0\3\12\6\0\2\12\11\0\1\62\3\0\24\12"+
    "\1\213\5\0\10\12\2\0\1\12\3\0\1\62\1\63"+
    "\5\12\1\0\3\12\6\0\2\12\11\0\1\62\3\0"+
    "\23\12\1\214\1\12\5\0\10\12\2\0\1\12\3\0"+
    "\1\62\1\63\5\12\1\0\3\12\1\215\5\0\2\12"+
    "\11\0\1\62\3\0\25\12\5\0\10\24\2\0\1\24"+
    "\3\0\1\62\1\63\5\24\1\0\3\24\6\0\2\24"+
    "\11\0\1\62\3\0\13\24\1\216\11\24\37\0\1\217"+
    "\55\0\10\24\2\0\1\24\3\0\1\62\1\63\5\24"+
    "\1\0\3\24\6\0\2\24\11\0\1\62\3\0\16\24"+
    "\1\220\6\24\3\0\1\221\144\0\1\222\51\0\1\223"+
    "\145\0\1\224\52\0\1\225\106\0\1\226\146\0\1\227"+
    "\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\3\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\7\1\2\0\12\1\1\0\1\11\1\0"+
    "\1\11\1\0\2\1\7\11\1\0\1\1\5\11\1\1"+
    "\1\11\20\1\1\0\1\11\1\1\1\11\17\1\1\0"+
    "\24\1\1\0\1\1\1\0\1\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RideLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RideLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 70: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 3: 
            { return AT_SYMBOL;
            } 
            // fall through
          case 72: break;
          case 4: 
            { return LOWER_ID;
            } 
            // fall through
          case 73: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 74: break;
          case 6: 
            { return INTEGER;
            } 
            // fall through
          case 75: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 76: break;
          case 8: 
            { return UPPER_ID;
            } 
            // fall through
          case 77: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 78: break;
          case 10: 
            { return RBRACE;
            } 
            // fall through
          case 79: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 80: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 81: break;
          case 13: 
            { return BIT_OR;
            } 
            // fall through
          case 82: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 83: break;
          case 15: 
            { return ASSIGN;
            } 
            // fall through
          case 84: break;
          case 16: 
            { return LBRACE;
            } 
            // fall through
          case 85: break;
          case 17: 
            { return UNDERSCORE;
            } 
            // fall through
          case 86: break;
          case 18: 
            { return LBRACKET;
            } 
            // fall through
          case 87: break;
          case 19: 
            { return RBRACKET;
            } 
            // fall through
          case 88: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 89: break;
          case 21: 
            { return GT;
            } 
            // fall through
          case 90: break;
          case 22: 
            { return BANG;
            } 
            // fall through
          case 91: break;
          case 23: 
            { return PLUS;
            } 
            // fall through
          case 92: break;
          case 24: 
            { return BIT_AND;
            } 
            // fall through
          case 93: break;
          case 25: 
            { return MUL;
            } 
            // fall through
          case 94: break;
          case 26: 
            { return SLASH;
            } 
            // fall through
          case 95: break;
          case 27: 
            { return PERCENT;
            } 
            // fall through
          case 96: break;
          case 28: 
            { return LESS;
            } 
            // fall through
          case 97: break;
          case 29: 
            { return SEMICOLON;
            } 
            // fall through
          case 98: break;
          case 30: 
            { return STRING;
            } 
            // fall through
          case 99: break;
          case 31: 
            { return SQSTRING;
            } 
            // fall through
          case 100: break;
          case 32: 
            { return IF;
            } 
            // fall through
          case 101: break;
          case 33: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 102: break;
          case 34: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 103: break;
          case 35: 
            { return PREPEND;
            } 
            // fall through
          case 104: break;
          case 36: 
            { return APPEND;
            } 
            // fall through
          case 105: break;
          case 37: 
            { return COND_OR;
            } 
            // fall through
          case 106: break;
          case 38: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 107: break;
          case 39: 
            { return EQ;
            } 
            // fall through
          case 108: break;
          case 40: 
            { return ARROW;
            } 
            // fall through
          case 109: break;
          case 41: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 110: break;
          case 42: 
            { return NOT_EQ;
            } 
            // fall through
          case 111: break;
          case 43: 
            { return CONCAT;
            } 
            // fall through
          case 112: break;
          case 44: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 113: break;
          case 45: 
            { return COND_AND;
            } 
            // fall through
          case 114: break;
          case 46: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 115: break;
          case 47: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 116: break;
          case 48: 
            { return LET;
            } 
            // fall through
          case 117: break;
          case 49: 
            { return RDBRACKET;
            } 
            // fall through
          case 118: break;
          case 50: 
            { return LDBRACKET;
            } 
            // fall through
          case 119: break;
          case 51: 
            { return NIL;
            } 
            // fall through
          case 120: break;
          case 52: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 121: break;
          case 53: 
            { return INT;
            } 
            // fall through
          case 122: break;
          case 54: 
            { return TRUE;
            } 
            // fall through
          case 123: break;
          case 55: 
            { return THEN;
            } 
            // fall through
          case 124: break;
          case 56: 
            { return UNIT;
            } 
            // fall through
          case 125: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 126: break;
          case 58: 
            { return FUNCTION;
            } 
            // fall through
          case 127: break;
          case 59: 
            { return CASE;
            } 
            // fall through
          case 128: break;
          case 60: 
            { return FOLD_KW;
            } 
            // fall through
          case 129: break;
          case 61: 
            { return FALSE;
            } 
            // fall through
          case 130: break;
          case 62: 
            { return RIDE_FILE;
            } 
            // fall through
          case 131: break;
          case 63: 
            { return MATCH;
            } 
            // fall through
          case 132: break;
          case 64: 
            { return STRICT;
            } 
            // fall through
          case 133: break;
          case 65: 
            { return BASE16;
            } 
            // fall through
          case 134: break;
          case 66: 
            { return BASE64;
            } 
            // fall through
          case 135: break;
          case 67: 
            { return BASE58;
            } 
            // fall through
          case 136: break;
          case 68: 
            { return ASTERISK;
            } 
            // fall through
          case 137: break;
          case 69: 
            { return NEW_LINE;
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
