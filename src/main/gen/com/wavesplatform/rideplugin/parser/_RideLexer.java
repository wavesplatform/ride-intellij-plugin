/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.wavesplatform.rideplugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.wavesplatform.rideplugin.psi.RideTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_RideLexer.flex</tt>
 */
public class _RideLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\15\4\2\22\0\1\15\1\37\1\16\1\13\1\0\1\47\1\42\1\17\1\33\1\34\1\45"+
    "\1\40\1\36\1\23\1\51\1\46\1\14\1\72\2\14\1\76\1\74\1\73\1\14\1\75\1\14\1\35"+
    "\1\0\1\44\1\21\1\50\1\0\1\25\1\64\2\20\1\60\1\66\1\55\2\20\1\61\1\20\1\70"+
    "\1\57\1\20\1\62\1\56\2\20\1\67\1\65\1\63\6\20\1\31\1\0\1\32\1\43\1\30\1\0"+
    "\1\10\1\71\1\52\1\20\1\6\1\7\1\20\1\54\1\26\2\20\1\11\1\53\1\27\3\20\1\4\1"+
    "\12\1\3\1\5\5\20\1\22\1\41\1\24\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\7\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\2\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\16\3\2\4"+
    "\1\0\1\34\1\0\1\35\1\36\1\0\1\37\1\40"+
    "\1\41\1\3\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\14\3\1\54\1\3\1\55"+
    "\1\56\1\57\1\60\3\3\1\61\2\3\1\62\1\63"+
    "\1\64\1\65\1\66\2\3\1\67\1\3\1\70\2\3"+
    "\1\71\1\3\1\72\4\3\1\73\1\3\1\74\1\75"+
    "\1\76\1\3\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\77\0\77\0\u042f\0\u046e\0\374\0\77\0\77"+
    "\0\77\0\77\0\u04ad\0\77\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\77\0\77\0\77\0\77\0\u05e8\0\77\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u02f4\0\77"+
    "\0\u0333\0\77\0\77\0\u0a17\0\77\0\77\0\374\0\u0a56"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\u0a95\0\77\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\374\0\u0dc8"+
    "\0\u0999\0\77\0\374\0\77\0\u0e07\0\u0e46\0\u0e85\0\374"+
    "\0\u0ec4\0\u0f03\0\374\0\374\0\374\0\374\0\374\0\u0f42"+
    "\0\u0f81\0\374\0\u0fc0\0\374\0\u0fff\0\u103e\0\374\0\u107d"+
    "\0\374\0\u10bc\0\u10fb\0\u113a\0\u1179\0\374\0\u11b8\0\374"+
    "\0\374\0\374\0\u11f7\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\2\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\5\1\51\3\5\1\52\2\5"+
    "\1\53\4\5\1\54\5\14\101\0\1\3\12\0\1\3"+
    "\64\0\1\5\1\55\6\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\2\5\1\56\22\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\25\5"+
    "\3\0\10\5\1\0\1\5\3\0\1\5\5\0\1\5"+
    "\1\57\1\5\21\0\25\5\3\0\6\5\1\60\1\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\25\5"+
    "\3\0\2\5\1\61\2\5\1\62\2\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\3\5"+
    "\1\63\4\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\1\64\7\5\1\0\1\5\3\0"+
    "\1\5\5\0\3\5\21\0\25\5\1\65\2\0\20\65"+
    "\1\66\53\65\14\0\1\14\55\0\5\14\16\67\1\70"+
    "\60\67\17\71\1\72\57\71\21\0\1\73\100\0\1\74"+
    "\74\0\1\75\1\0\1\76\56\0\4\5\1\77\3\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\25\5"+
    "\3\0\10\5\1\0\1\5\3\0\1\5\5\0\1\100"+
    "\2\5\21\0\25\5\35\0\1\101\2\0\1\102\57\0"+
    "\1\103\115\0\1\104\57\0\1\105\17\0\1\106\56\0"+
    "\1\107\20\0\1\110\1\111\54\0\1\112\60\0\5\5"+
    "\1\113\2\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\5\5\1\114\2\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\4\5"+
    "\1\115\20\5\3\0\10\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\10\5\1\116\14\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\13\5"+
    "\1\117\11\5\3\0\5\5\1\120\2\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\2\5"+
    "\1\121\5\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\3\5\1\122\4\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\1\123\2\5\21\0"+
    "\25\5\3\0\7\5\1\124\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\25\5\3\0\10\5\1\0\1\5"+
    "\3\0\1\5\5\0\1\5\1\125\1\5\21\0\25\5"+
    "\3\0\6\5\1\126\1\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\25\5\3\0\1\127\7\5\1\0"+
    "\1\5\3\0\1\5\5\0\3\5\21\0\25\5\3\0"+
    "\1\5\1\130\6\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\25\5\1\65\2\0\75\65\2\0\21\65"+
    "\1\131\52\65\13\0\1\132\66\0\6\5\1\133\1\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\25\5"+
    "\21\0\1\134\60\0\7\5\1\135\1\0\1\5\3\0"+
    "\1\5\5\0\3\5\21\0\25\5\3\0\1\136\7\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\25\5"+
    "\3\0\10\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\5\5\1\137\17\5\3\0\10\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\11\5\1\140\13\5"+
    "\3\0\10\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\11\5\1\141\13\5\3\0\7\5\1\142\1\0"+
    "\1\5\3\0\1\5\5\0\3\5\21\0\25\5\3\0"+
    "\3\5\1\143\4\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\25\5\3\0\10\5\1\0\1\5\3\0"+
    "\1\5\5\0\1\5\1\144\1\5\21\0\25\5\3\0"+
    "\1\145\7\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\3\5\1\146\4\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\1\147"+
    "\24\5\3\0\7\5\1\150\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\25\5\3\0\10\5\1\0\1\5"+
    "\3\0\1\5\5\0\1\151\2\5\21\0\25\5\3\0"+
    "\3\5\1\152\4\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\25\5\3\0\10\5\1\0\1\5\3\0"+
    "\1\5\5\0\3\5\21\0\1\153\24\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\6\5"+
    "\1\154\16\5\3\0\10\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\14\5\1\155\10\5\3\0\3\5"+
    "\1\156\4\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\3\5\1\157\4\5\1\0\1\5"+
    "\3\0\1\5\5\0\3\5\21\0\25\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\1\160"+
    "\24\5\3\0\10\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\2\5\1\161\22\5\3\0\10\5\1\0"+
    "\1\5\3\0\1\5\5\0\3\5\21\0\15\5\1\162"+
    "\7\5\3\0\10\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\20\5\1\163\1\164\1\165\2\5\3\0"+
    "\1\166\7\5\1\0\1\5\3\0\1\5\5\0\3\5"+
    "\21\0\25\5\3\0\10\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\7\5\1\167\15\5\3\0\10\5"+
    "\1\0\1\5\3\0\1\5\5\0\3\5\21\0\21\5"+
    "\1\170\3\5\3\0\10\5\1\0\1\5\3\0\1\5"+
    "\5\0\3\5\21\0\24\5\1\171\3\0\10\5\1\0"+
    "\1\5\3\0\1\5\5\0\3\5\21\0\23\5\1\172"+
    "\1\5\3\0\10\5\1\0\1\5\3\0\1\5\5\0"+
    "\3\5\21\0\13\5\1\173\11\5\3\0\10\5\1\0"+
    "\1\5\3\0\1\5\5\0\3\5\21\0\16\5\1\174"+
    "\6\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\2\11\3\1\4\11\1\1\1\11"+
    "\4\1\4\11\1\1\1\11\20\1\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\2\1\10\11\1\1\1\11\17\1"+
    "\1\11\1\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RideLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RideLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 3: 
            { return IDENT;
            } 
            // fall through
          case 66: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 67: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 68: break;
          case 6: 
            { return ASSIGN;
            } 
            // fall through
          case 69: break;
          case 7: 
            { return LBRACE;
            } 
            // fall through
          case 70: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 71: break;
          case 9: 
            { return RBRACE;
            } 
            // fall through
          case 72: break;
          case 10: 
            { return AT_SYMBOL;
            } 
            // fall through
          case 73: break;
          case 11: 
            { return UNDERSCORE;
            } 
            // fall through
          case 74: break;
          case 12: 
            { return LBRACKET;
            } 
            // fall through
          case 75: break;
          case 13: 
            { return RBRACKET;
            } 
            // fall through
          case 76: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 77: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 78: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 79: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 80: break;
          case 18: 
            { return BANG;
            } 
            // fall through
          case 81: break;
          case 19: 
            { return PLUS;
            } 
            // fall through
          case 82: break;
          case 20: 
            { return BIT_OR;
            } 
            // fall through
          case 83: break;
          case 21: 
            { return BIT_AND;
            } 
            // fall through
          case 84: break;
          case 22: 
            { return LESS;
            } 
            // fall through
          case 85: break;
          case 23: 
            { return MUL;
            } 
            // fall through
          case 86: break;
          case 24: 
            { return SLASH;
            } 
            // fall through
          case 87: break;
          case 25: 
            { return PERCENT;
            } 
            // fall through
          case 88: break;
          case 26: 
            { return GT;
            } 
            // fall through
          case 89: break;
          case 27: 
            { return DOT;
            } 
            // fall through
          case 90: break;
          case 28: 
            { return STRING;
            } 
            // fall through
          case 91: break;
          case 29: 
            { return SQSTRING;
            } 
            // fall through
          case 92: break;
          case 30: 
            { return EQ;
            } 
            // fall through
          case 93: break;
          case 31: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 94: break;
          case 32: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 95: break;
          case 33: 
            { return IF;
            } 
            // fall through
          case 96: break;
          case 34: 
            { return PREPEND;
            } 
            // fall through
          case 97: break;
          case 35: 
            { return APPEND;
            } 
            // fall through
          case 98: break;
          case 36: 
            { return NOT_EQ;
            } 
            // fall through
          case 99: break;
          case 37: 
            { return CONCAT;
            } 
            // fall through
          case 100: break;
          case 38: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 101: break;
          case 39: 
            { return COND_OR;
            } 
            // fall through
          case 102: break;
          case 40: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 103: break;
          case 41: 
            { return COND_AND;
            } 
            // fall through
          case 104: break;
          case 42: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 105: break;
          case 43: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 106: break;
          case 44: 
            { return LET;
            } 
            // fall through
          case 107: break;
          case 45: 
            { return RDBRACKET;
            } 
            // fall through
          case 108: break;
          case 46: 
            { return LDBRACKET;
            } 
            // fall through
          case 109: break;
          case 47: 
            { return NIL;
            } 
            // fall through
          case 110: break;
          case 48: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 111: break;
          case 49: 
            { return INT;
            } 
            // fall through
          case 112: break;
          case 50: 
            { return TRUE;
            } 
            // fall through
          case 113: break;
          case 51: 
            { return THEN;
            } 
            // fall through
          case 114: break;
          case 52: 
            { return UNIT;
            } 
            // fall through
          case 115: break;
          case 53: 
            { return ELSE;
            } 
            // fall through
          case 116: break;
          case 54: 
            { return FUNCTION;
            } 
            // fall through
          case 117: break;
          case 55: 
            { return CASE;
            } 
            // fall through
          case 118: break;
          case 56: 
            { return FOLD_KW;
            } 
            // fall through
          case 119: break;
          case 57: 
            { return FALSE;
            } 
            // fall through
          case 120: break;
          case 58: 
            { return MATCH;
            } 
            // fall through
          case 121: break;
          case 59: 
            { return STRICT;
            } 
            // fall through
          case 122: break;
          case 60: 
            { return BASE16;
            } 
            // fall through
          case 123: break;
          case 61: 
            { return BASE64;
            } 
            // fall through
          case 124: break;
          case 62: 
            { return BASE58;
            } 
            // fall through
          case 125: break;
          case 63: 
            { return ASTERISK;
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
