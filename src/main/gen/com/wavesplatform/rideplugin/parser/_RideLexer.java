/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.wavesplatform.rideplugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.wavesplatform.rideplugin.psi.RideTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.wavesplatform.rideplugin.psi.RideTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_RideLexer.flex</tt>
 */
public class _RideLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\16\4\2\22\0\1\16\1\42\1\17\1\14\1\0\1\51\1\45\1\20\1\36\1\37\1\47"+
    "\1\43\1\41\1\31\1\22\1\50\1\15\1\74\2\15\1\100\1\76\1\75\1\15\1\77\1\15\1"+
    "\40\1\0\1\53\1\27\1\52\1\0\1\3\1\66\2\25\1\62\1\70\1\57\2\25\1\63\1\25\1\72"+
    "\1\61\1\25\1\64\1\60\2\25\1\71\1\67\1\65\6\25\1\34\1\0\1\35\1\46\1\26\1\0"+
    "\1\11\1\73\1\54\1\24\1\7\1\10\1\21\1\56\1\23\2\21\1\12\1\55\1\33\3\21\1\5"+
    "\1\13\1\4\1\6\5\21\1\30\1\44\1\32\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\7\4\1\5\1\6\2\1"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\4\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\4\3\10\2\4\1\0\7\4\2\5\2\0\1\35"+
    "\1\0\1\36\1\0\1\37\1\40\1\6\1\41\1\0"+
    "\1\42\1\43\1\4\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\2\4\3\10"+
    "\7\4\1\57\1\4\1\60\1\0\1\61\1\62\1\63"+
    "\2\4\1\10\1\64\1\10\1\4\1\65\1\66\1\67"+
    "\1\70\1\71\2\4\1\0\1\72\1\4\1\73\1\10"+
    "\1\4\1\74\1\4\1\75\1\76\1\10\3\4\1\77"+
    "\1\10\1\100\1\101\1\102\1\10\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\101\0\u0555"+
    "\0\101\0\101\0\101\0\101\0\u0596\0\101\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\101\0\101\0\101\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u038e\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u030c\0\101\0\u034d\0\101\0\u0bae\0\u0104\0\u0bef"+
    "\0\u0451\0\101\0\u0c30\0\101\0\101\0\u0c71\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u0cb2\0\101"+
    "\0\101\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0104\0\u0fff\0\u0aeb"+
    "\0\u1040\0\101\0\u0104\0\101\0\u1081\0\u10c2\0\u1103\0\u0410"+
    "\0\u1144\0\u1185\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u11c6"+
    "\0\u1207\0\u1248\0\u0104\0\u1289\0\u0410\0\u12ca\0\u130b\0\u0104"+
    "\0\u134c\0\101\0\u0104\0\u138d\0\u13ce\0\u140f\0\u1450\0\u0104"+
    "\0\u1491\0\u0104\0\u0104\0\u0104\0\u14d2\0\u0410";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\6\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\6\1\20\1\21\1\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\2\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\6\1\52\3\22"+
    "\1\53\2\22\1\54\4\22\1\55\5\15\103\0\1\3"+
    "\13\0\1\3\66\0\1\6\1\56\6\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\2\6"+
    "\1\60\22\6\4\0\10\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\6\20\0\25\6\4\0\10\6"+
    "\1\0\1\6\3\0\1\6\1\57\4\6\4\0\1\61"+
    "\20\0\25\6\4\0\6\6\1\62\1\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\25\6"+
    "\4\0\2\6\1\63\2\6\1\64\2\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\25\6"+
    "\4\0\3\6\1\65\4\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\6\20\0\25\6\4\0\1\66"+
    "\7\6\1\0\1\6\3\0\1\6\1\57\4\6\4\0"+
    "\1\6\20\0\25\6\1\67\2\0\26\67\1\70\47\67"+
    "\4\0\10\71\1\0\1\15\3\0\1\71\1\57\3\71"+
    "\1\15\4\0\1\71\20\0\20\71\5\15\17\72\1\73"+
    "\61\72\20\74\1\75\60\74\5\0\1\76\77\0\4\6"+
    "\1\77\3\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\10\22\1\0\1\22"+
    "\3\0\1\22\1\57\4\22\4\0\1\22\20\0\25\22"+
    "\4\0\10\100\1\0\1\101\3\0\1\100\1\57\3\100"+
    "\1\101\4\0\1\100\20\0\20\100\5\101\27\0\1\102"+
    "\102\0\1\103\76\0\1\104\1\0\1\105\53\0\10\6"+
    "\1\0\1\6\3\0\1\6\1\57\1\106\3\6\4\0"+
    "\1\6\20\0\25\6\40\0\1\107\2\0\1\110\64\0"+
    "\1\111\114\0\1\112\64\0\1\113\14\0\1\114\63\0"+
    "\1\115\15\0\1\116\1\117\61\0\1\120\100\0\1\121"+
    "\55\0\5\6\1\122\2\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\6\20\0\25\6\4\0\5\6"+
    "\1\123\2\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\10\22\1\0\1\22"+
    "\3\0\1\22\1\57\4\22\4\0\1\22\20\0\4\22"+
    "\1\124\20\22\4\0\10\22\1\0\1\22\3\0\1\22"+
    "\1\57\4\22\4\0\1\22\20\0\10\22\1\125\14\22"+
    "\4\0\10\22\1\0\1\22\3\0\1\22\1\57\4\22"+
    "\4\0\1\22\20\0\13\22\1\126\11\22\4\0\5\6"+
    "\1\127\2\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\2\6\1\130\5\6"+
    "\1\0\1\6\3\0\1\6\1\57\4\6\4\0\1\6"+
    "\20\0\25\6\4\0\3\6\1\131\4\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\25\6"+
    "\4\0\10\6\1\0\1\6\3\0\1\6\1\57\1\132"+
    "\3\6\4\0\1\6\20\0\25\6\4\0\7\6\1\133"+
    "\1\0\1\6\3\0\1\6\1\57\4\6\4\0\1\6"+
    "\20\0\25\6\4\0\10\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\134\20\0\25\6\4\0\6\6"+
    "\1\135\1\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\1\136\7\6\1\0"+
    "\1\6\3\0\1\6\1\57\4\6\4\0\1\6\20\0"+
    "\25\6\4\0\1\6\1\137\6\6\1\0\1\6\3\0"+
    "\1\6\1\57\4\6\4\0\1\6\20\0\25\6\1\67"+
    "\2\0\77\67\2\0\27\67\1\140\46\67\4\0\10\71"+
    "\1\0\1\71\3\0\1\71\1\57\4\71\4\0\1\71"+
    "\20\0\25\71\23\0\1\141\61\0\10\100\1\0\1\100"+
    "\3\0\1\100\1\57\4\100\4\0\1\100\20\0\25\100"+
    "\14\0\1\142\70\0\6\6\1\143\1\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\25\6"+
    "\27\0\1\144\55\0\7\6\1\145\1\0\1\6\3\0"+
    "\1\6\1\57\4\6\4\0\1\6\20\0\25\6\4\0"+
    "\1\146\7\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\10\22\1\0\1\22"+
    "\3\0\1\22\1\57\4\22\4\0\1\22\20\0\5\22"+
    "\1\147\17\22\4\0\10\22\1\0\1\22\3\0\1\22"+
    "\1\57\4\22\4\0\1\22\20\0\11\22\1\150\13\22"+
    "\4\0\10\22\1\0\1\22\3\0\1\22\1\57\4\22"+
    "\4\0\1\22\20\0\11\22\1\151\13\22\4\0\7\6"+
    "\1\152\1\0\1\6\3\0\1\6\1\57\4\6\4\0"+
    "\1\6\20\0\25\6\4\0\3\6\1\153\4\6\1\0"+
    "\1\6\3\0\1\6\1\57\4\6\4\0\1\6\20\0"+
    "\25\6\4\0\10\6\1\0\1\6\3\0\1\6\1\57"+
    "\4\6\4\0\1\154\20\0\25\6\4\0\1\155\7\6"+
    "\1\0\1\6\3\0\1\6\1\57\4\6\4\0\1\6"+
    "\20\0\25\6\4\0\3\6\1\156\4\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\25\6"+
    "\4\0\10\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\1\157\24\6\4\0\7\6\1\160"+
    "\1\0\1\6\3\0\1\6\1\57\4\6\4\0\1\6"+
    "\20\0\25\6\4\0\10\6\1\0\1\6\3\0\1\6"+
    "\1\57\1\161\3\6\4\0\1\6\20\0\25\6\24\0"+
    "\1\162\60\0\3\6\1\163\4\6\1\0\1\6\3\0"+
    "\1\6\1\57\4\6\4\0\1\6\20\0\25\6\4\0"+
    "\10\6\1\0\1\6\3\0\1\6\1\57\4\6\4\0"+
    "\1\6\20\0\1\164\24\6\4\0\10\22\1\0\1\22"+
    "\3\0\1\22\1\57\4\22\4\0\1\22\20\0\6\22"+
    "\1\165\16\22\4\0\10\22\1\0\1\22\3\0\1\22"+
    "\1\57\4\22\4\0\1\22\20\0\14\22\1\166\10\22"+
    "\4\0\3\6\1\167\4\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\6\20\0\25\6\4\0\3\6"+
    "\1\170\4\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\10\6\1\0\1\6"+
    "\3\0\1\6\1\57\4\6\4\0\1\6\20\0\1\171"+
    "\24\6\7\0\1\172\75\0\10\6\1\0\1\6\3\0"+
    "\1\6\1\57\4\6\4\0\1\6\20\0\2\6\1\173"+
    "\22\6\4\0\10\22\1\0\1\22\3\0\1\22\1\57"+
    "\4\22\4\0\1\22\20\0\15\22\1\174\7\22\4\0"+
    "\10\6\1\0\1\6\3\0\1\6\1\57\4\6\4\0"+
    "\1\6\20\0\20\6\1\175\1\176\1\177\2\6\4\0"+
    "\1\200\7\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\25\6\4\0\10\22\1\0\1\22"+
    "\3\0\1\22\1\57\4\22\4\0\1\22\20\0\7\22"+
    "\1\201\15\22\4\0\10\6\1\0\1\6\3\0\1\6"+
    "\1\57\4\6\4\0\1\6\20\0\21\6\1\202\3\6"+
    "\4\0\10\6\1\0\1\6\3\0\1\6\1\57\4\6"+
    "\4\0\1\6\20\0\24\6\1\203\4\0\10\6\1\0"+
    "\1\6\3\0\1\6\1\57\4\6\4\0\1\6\20\0"+
    "\23\6\1\204\1\6\4\0\10\22\1\0\1\22\3\0"+
    "\1\22\1\57\4\22\4\0\1\22\20\0\13\22\1\205"+
    "\11\22\4\0\10\22\1\0\1\22\3\0\1\22\1\57"+
    "\4\22\4\0\1\22\20\0\16\22\1\206\6\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\22\1\1\11\1\1\4\11"+
    "\1\1\1\11\4\1\3\11\11\1\1\0\11\1\2\0"+
    "\1\11\1\0\1\11\1\0\3\1\1\11\1\0\2\11"+
    "\1\1\10\11\1\1\2\11\17\1\1\0\1\11\1\1"+
    "\1\11\15\1\1\0\7\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RideLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RideLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 68: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 3: 
            { return AT_SYMBOL;
            } 
            // fall through
          case 70: break;
          case 4: 
            { return LOWER_ID;
            } 
            // fall through
          case 71: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 72: break;
          case 6: 
            { return INTEGER;
            } 
            // fall through
          case 73: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 74: break;
          case 8: 
            { return UPPER_ID;
            } 
            // fall through
          case 75: break;
          case 9: 
            { return UNDERSCORE;
            } 
            // fall through
          case 76: break;
          case 10: 
            { return ASSIGN;
            } 
            // fall through
          case 77: break;
          case 11: 
            { return LBRACE;
            } 
            // fall through
          case 78: break;
          case 12: 
            { return MINUS;
            } 
            // fall through
          case 79: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 80: break;
          case 14: 
            { return LBRACKET;
            } 
            // fall through
          case 81: break;
          case 15: 
            { return RBRACKET;
            } 
            // fall through
          case 82: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 83: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 84: break;
          case 18: 
            { return COLON;
            } 
            // fall through
          case 85: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 86: break;
          case 20: 
            { return BANG;
            } 
            // fall through
          case 87: break;
          case 21: 
            { return PLUS;
            } 
            // fall through
          case 88: break;
          case 22: 
            { return BIT_OR;
            } 
            // fall through
          case 89: break;
          case 23: 
            { return BIT_AND;
            } 
            // fall through
          case 90: break;
          case 24: 
            { return MUL;
            } 
            // fall through
          case 91: break;
          case 25: 
            { return SLASH;
            } 
            // fall through
          case 92: break;
          case 26: 
            { return PERCENT;
            } 
            // fall through
          case 93: break;
          case 27: 
            { return GT;
            } 
            // fall through
          case 94: break;
          case 28: 
            { return LESS;
            } 
            // fall through
          case 95: break;
          case 29: 
            { return STRING;
            } 
            // fall through
          case 96: break;
          case 30: 
            { return SQSTRING;
            } 
            // fall through
          case 97: break;
          case 31: 
            { return IF;
            } 
            // fall through
          case 98: break;
          case 32: 
            { return IDENT;
            } 
            // fall through
          case 99: break;
          case 33: 
            { return EQ;
            } 
            // fall through
          case 100: break;
          case 34: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 101: break;
          case 35: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 102: break;
          case 36: 
            { return PREPEND;
            } 
            // fall through
          case 103: break;
          case 37: 
            { return APPEND;
            } 
            // fall through
          case 104: break;
          case 38: 
            { return NOT_EQ;
            } 
            // fall through
          case 105: break;
          case 39: 
            { return CONCAT;
            } 
            // fall through
          case 106: break;
          case 40: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 107: break;
          case 41: 
            { return COND_OR;
            } 
            // fall through
          case 108: break;
          case 42: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 109: break;
          case 43: 
            { return COND_AND;
            } 
            // fall through
          case 110: break;
          case 44: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 111: break;
          case 45: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 112: break;
          case 46: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 113: break;
          case 47: 
            { return LET;
            } 
            // fall through
          case 114: break;
          case 48: 
            { return RDBRACKET;
            } 
            // fall through
          case 115: break;
          case 49: 
            { return LDBRACKET;
            } 
            // fall through
          case 116: break;
          case 50: 
            { return NIL;
            } 
            // fall through
          case 117: break;
          case 51: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 52: 
            { return INT;
            } 
            // fall through
          case 119: break;
          case 53: 
            { return TRUE;
            } 
            // fall through
          case 120: break;
          case 54: 
            { return THEN;
            } 
            // fall through
          case 121: break;
          case 55: 
            { return UNIT;
            } 
            // fall through
          case 122: break;
          case 56: 
            { return ELSE;
            } 
            // fall through
          case 123: break;
          case 57: 
            { return FUNCTION;
            } 
            // fall through
          case 124: break;
          case 58: 
            { return CASE;
            } 
            // fall through
          case 125: break;
          case 59: 
            { return FOLD_KW;
            } 
            // fall through
          case 126: break;
          case 60: 
            { return FALSE;
            } 
            // fall through
          case 127: break;
          case 61: 
            { return RIDE_FILE;
            } 
            // fall through
          case 128: break;
          case 62: 
            { return MATCH;
            } 
            // fall through
          case 129: break;
          case 63: 
            { return STRICT;
            } 
            // fall through
          case 130: break;
          case 64: 
            { return BASE16;
            } 
            // fall through
          case 131: break;
          case 65: 
            { return BASE64;
            } 
            // fall through
          case 132: break;
          case 66: 
            { return BASE58;
            } 
            // fall through
          case 133: break;
          case 67: 
            { return ASTERISK;
            } 
            // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
