{
  parserClass="com.wavesplatform.rideplugin.parser.RideParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Ride"
  psiImplClassSuffix="Impl"
  psiPackage="com.wavesplatform.rideplugin.psi"
  psiImplPackage="com.wavesplatform.rideplugin.psi.impl"

  elementTypeHolderClass="com.wavesplatform.rideplugin.psi.RideTypes"
  elementTypeClass="com.wavesplatform.rideplugin.psi.RideElementType"
  tokenTypeClass="com.wavesplatform.rideplugin.psi.RideTokenType"

  tokens=[
    IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
    NUMBER ='regexp:[1-9][0-9]*'
    INT = "regexp:[0-9]+"
//    STRING = 'regexp:(\")[^\"]*\"'
    //(?:'|").*(?:'|")
    STRING="regexp:([\"'])((?:\\\1|(?:(?!\1)).)*)(\1)"
    BASE='regexp:base16|base58|base64'
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','
    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    PLUS_PLUS            =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    BIT_CLEAR_ASSIGN     =  '&^='
    BIT_CLEAR            =  '&^'
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    VAR_ASSIGN           =  ':='
    TRIPLE_DOT           =  '...'
    DOT                  =  '.'
    SEMICOLON_SYNTHETIC  = '<NL>'
    TYPE_                = 'type'
    raw_string           = 'raw_string'
    WHITE_SPACE = 'regexp:\s+'
    COMMENT = 'regexp:#.*'
  ]
}

File ::= Definition*
Definition ::= MetaDefinition* FunctionDefinition

MetaDefinition ::= '{-#' IDENTIFIER (IDENTIFIER|NUMBER) '#-}'

FunctionDefinition ::= func FunctionSignature ASSIGN (LBRACE FunctionBody RBRACE | FunctionInvocation)

FunctionSignature ::= IDENTIFIER FunctionParamsDefinition

FunctionParamsDefinition ::= ArgumentsDefinition

FunctionBody ::= Statement*


Statement ::= LetDefinition | FunctionInvocation | COMMENT | ArrayDefinition

LetDefinition ::= let IDENTIFIER ASSIGN (FunctionInvocation | StructCreation | MethodInvocation)

StructCreation ::= IDENTIFIER ArgumentsDefinition

ArgumentsDefinition ::= LPAREN ArgumentDefinition? (COMMA ArgumentDefinition)* RPAREN

ArgumentDefinition ::= BooleanLiteral | StringLiteral | NumberLiteral | IntLiteral |
UnitLiteral | BaseLiteral | ArrayElementAtIndex | ObjectFieldCall | StructCreation | IDENTIFIER

FunctionInvocation ::= IDENTIFIER ArgumentsDefinition

MethodInvocation ::= IDENTIFIER DOT FunctionInvocation

BooleanLiteral ::= true | false
UnitLiteral ::= unit
StringLiteral ::= STRING
IntLiteral ::= INT
NumberLiteral ::= NUMBER
BaseLiteral ::= (base16|base58|base64) StringLiteral
ArrayDefinition ::= LBRACK ArgumentDefinition? (COMMA ArgumentDefinition)* RBRACK

ObjectFieldCall ::= IDENTIFIER DOT IDENTIFIER

ArrayElementAtIndex ::= ObjectFieldCall LBRACK INT RBRACK